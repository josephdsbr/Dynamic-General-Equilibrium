plotFun(f(x,y) ~ x&y, x.lim = range(0,10))
plotFun(f(x,y) ~ x&y, x.lim = range(0,10), y.lim = range(0,10))
plotFun(f(x,y) ~ x&y, x.lim = range(0,10), y.lim = range(0,10), filled = F)
plotFun(f(x,y) ~ x&y, x.lim = range(-10,10), y.lim = range(-10,10), filled = F)
plotFun(f(x,y) ~ x&y, filled = F)
plotFun(f(x,y) ~ x&y, x.lim = range(-10,10), y.lim = range(-10,10), filled = F)
plotFun(f(x,y) ~ x&y, x.lim = range(-10,10), y.lim = range(-10,10), filled = F, levels = 1)
plotFun(f(x,y) ~ x&y, x.lim = range(-10,10), y.lim = range(-10,10), filled = F, levels = 1, add = T)
plotFun(f(x,y) ~ x&y, x.lim = range(-10,10), y.lim = range(-10,10), filled = F, levels = 1)
plotFun(f(x,y) ~ x&y, x.lim = range(-10,10), y.lim = range(-10,10), filled = F, levels = 2, add = T)
plotFun(f(x,y) ~ x&y, x.lim = range(-10,10), y.lim = range(-10,10), filled = F, levels = c(3,4), add = T)
plotFun(g(x,y) ~ x&y, x.lim = range(-10,10), y.lim = range(-10,10), filled = F, levels = c(3,4), add = T)
U = makeFun((c*l)^0.5 ~ c&l)
plotFun(U(c,l) ~ x&y, x.lim = range(-10,10), y.lim = range(-10,10), filled = F, levels = c(3,4), add = T)
plotFun(U(c,l) ~ x&y, c.lim = range(-10,10), l.lim = range(-10,10), filled = F, levels = c(3,4), add = T)
plotFun(U(c,l) ~ c&l, c.lim = range(-10,10), l.lim = range(-10,10), filled = F, levels = c(3,4), add = T)
plotFun(U(c,l) ~ c&l, c.lim = range(-10,10), l.lim = range(-10,10), filled = F)
g = makeFun(c/(1-l) ~ c&l)
plotFun(g(c,l) ~ c&l, c.lin = range(-10,10), l.lim = range(-10,10), filled = F, levels = 1)
plotFun(U(c,l) ~ c&l, c.lim = range(-10,10), l.lim = range(-10,10), filled = F)
plotFun(U(c,l) ~ c&l, c.lim = range(-10,10), l.lim = range(-10,10), filled = F, levels = 1)
plotFun(g(c,l) ~ c&l, c.lin = range(-10,10), l.lim = range(-10,10), filled = F, levels = 1, add = T)
write.csv(iris,'iris.csv', row.names =F)
iris
q()
q()
q()
q()
install.packages('flexdashboard')
require(DT)
install.packages('DT')
install.packages('rpivotTable')
install.packages('plotly')
require(openintro)
install.packages('openintro')
install.packages('highcharter')
library(flexdashboard)
library(knitr)
library(DT)
library(rpivotTable)
library(ggplot2)
library(plotly)
library(dplyr)
library(openintro)
library(highcharter)
data <- read.csv('VehicleFailure.csv')
length(data$State)
str(data)
?gauge
gauge(round(mean(data$lc),
digits = 2,
min = 0,
max = 350,
gaugeSectors(sucess = c(0, 150),
warning = c(150, 240),
danger = c(240,150),
colors = c('green','yellow','red'))))
require(shinydashboard)
install.packages('shinydashboard')
install.packages('shinydashboard')
install.packages('shinydashboard')
install.packages('shinydashboard')
install.packages('shinydashboard')
install.packages('shinydashboard')
install.packages('shinydashboard')
library(shinydashboard)
data(countries)
data(counties)
library(shiny); runApp('FlexPag/shinyapp.R')
runApp('FlexPag/shinyapp.R')
runApp('FlexPag/shinyapp.R')
runApp('FlexPag/shinyapp.R')
runApp('FlexPag/shinyapp.R')
vgsales <- choose.files()
data <- 'vgsales.csv'
head(data)
data <- read.csv('vgsales.csv')
library(shinydashboard)
library(shiny)
library(dplyr)
library(ggplot2)
data <- read.csv(choose.files())
library(shinydashboard)
data <- read.csv(file.choose())
head(data)
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp.R')
runApp('FlexPag/shinyapp.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
sum(data$NA_Sales)
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
str(data)
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
str(data)
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
soma <- aggregate(data = data, Global_Sales ~ Platform, FUN = sum)
soma
runApp('FlexPag/shinyapp2.R')
str(data)
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
require(plotly)
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
require(plotly)
runApp('FlexPag/shinyapp2.R')
str(Data)
str(data)
runApp('FlexPag/shinyapp.R')
runApp('FlexPag/shinyapp2.R')
str(data)
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
str(Data)
str(data)
levels(data$Genre)
runApp('FlexPag/shinyapp2.R')
act <- subset(soma, Genre == 'Action')
adv <- subset(soma, Genre == 'Adventure')
soma <- aggregate(data = data, Global_Sales ~ Genre + Year, FUN = sum)
act <- subset(soma, Genre == 'Action')
adv <- subset(soma, Genre == 'Adventure')
str(adv)
str(act)
str(data)
runApp('FlexPag/shinyapp2.R')
adv
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
fncols <- function(data, cname) {
add <-cname[!cname%in%names(data)]
if(length(add)!=0) data[add] <- NA
data
}
fncols(mtcars, 'mpg')
fncols(mtcars, 'abc')
fnlines <- function(data, time) {
add <- time[!time %in% data$Year]
if(length(add)!=0) data[add,] <- NA
data
}
fnlines(mtcars, 45 )
fnlines(data, 1955 )
fnlines <- function(data, time) {
add <- time[!time %in% data$Year]
if(length(add)!=0) data[add,c(Global_Sales)] <- NA
data
}
fnlines(data, 1955 )
fnlines <- function(data, time) {
add <- time[!time %in% data$Year]
if(length(add)!=0) data[add,c("Global_Sales")] <- NA
data
}
fnlines(data, 1955 )
head(fnlines(data, 1955 ))
library(shiny); runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
View(Data)
View(data)
runApp('FlexPag/shinyapp2.R')
total
total <- aggregate(data = data, Global_Sales ~ Year, FUN = sum) %>% filter(!Year == NA)
View(total)
total <- aggregate(data = data, Global_Sales ~ Year, FUN = sum)
total <- aggregate(data = data, Global_Sales ~ Year, FUN = sum) %>% filter(Year != 'N/A')
total <- aggregate(data = data, Global_Sales ~ Year, FUN = sum) %>% filter(Year != 'N/A' & Year %in% 1980:2015)
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
menu()
menuItem
menu
tabName
dashboardBody()
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
runApp('FlexPag/shinyapp2.R')
library(shiny); runApp('FlexPag/shinyapp2.R')
install.packages('BMR')
require(devtools)
install_github('kthohr/BMR')
install.packages('gEcon')
install.packages('gEconCpp')
install_github('zauster/gEconCpp')
install_github('rforge/gecon')
install_github('rforge','gecon')
shiny::runApp('GitHub Projects/Shiny/Shiny')
getwd()
shiny::runApp('UFPE/Monitoria/DSGE2/DSGE2/IS-LM')
runApp('UFPE/Monitoria/Shiny/Keynes-Model')
shiny::runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
library(readxl)
data <- read_excel("GitHub Projects/Shiny/DataCleaning/data.xlsx",
col_types = c("numeric", "text", "date",
"date", "text", "numeric", "text",
"text", "numeric", "numeric", "numeric",
"numeric", "text", "text", "numeric",
"numeric", "numeric", "numeric"),
na = "N/A")
View(data)
data <- read_excel("GitHub Projects/Shiny/DataCleaning/data.xlsx",
col_types = c("numeric", "text", "date",
"date", "text", "numeric", "text",
"text", "numeric", "numeric", "numeric",
"numeric", "text", "text", "numeric",
"numeric", "numeric", "numeric"),
na = "N/A")
data$`Descricao Compra` <- gsub(" ", "", data$`Descricao Compra`, fixed = TRUE)
data$`Descricao Compra` <- gsub("\\((.+)\\)","-\\1", data$`Descricao Compra`)
View(data)
data$`Descricao Compra` <- gsub("\\((.+)\\)","-\\1", data$`Descricao Compra`)
View(data)
runApp('GitHub Projects/Shiny/DataCleaning')
data$`Descricao Compra` <- gsub("\\((.+)\\)","-\\1", data$`Descricao Compra`, fixed = T)
View(data)
dim(data)
runApp('GitHub Projects/Shiny/DataCleaning')
for(i in 1:dim(data)[1]){
data$`Descricao Compra`[i] <- as.numeric(str_extract_all(data$`Descricao Compra`[i], "[0-9]+")[[1]])
}
library(stringr)
for(i in 1:dim(data)[1]){
data$`Descricao Compra`[i] <- as.numeric(str_extract_all(data$`Descricao Compra`[i], "[0-9]+")[[1]])
}
data <- read_excel("GitHub Projects/Shiny/DataCleaning/data.xlsx",
col_types = c("numeric", "text", "date",
"date", "text", "numeric", "text",
"text", "numeric", "numeric", "numeric",
"numeric", "text", "text", "numeric",
"numeric", "numeric", "numeric"),
na = "N/A")
data$`Descricao Compra` <- gsub(" ", "", data$`Descricao Compra`, fixed = TRUE)
:54167016
54167016
for(i in 1:dim(data)[1]){
data$`Descricao Compra`[i] <- as.numeric(str_extract_all(data$`Descricao Compra`[i], "[0-9]+")[[1]])
}
54167016
dim(data$`Descricao Compra`)
length(data$`Descricao Compra`)
length(unique(data$`Descricao Compra`))
table(data$`Mês Transação`)
runApp('GitHub Projects/Shiny/DataCleaning')
data <- read_excel("GitHub Projects/Shiny/DataCleaning/data.xlsx",
col_types = c("numeric", "text", "date",
"date", "text", "numeric", "text",
"text", "numeric", "numeric", "numeric",
"numeric", "text", "text", "numeric",
"numeric", "numeric", "numeric"))
data$`Descricao Compra` <- gsub(" ", "", data$`Descricao Compra`, fixed = TRUE)
for(i in 1:dim(data)[1]){
data$`Descricao Compra`[i] <- as.numeric(str_extract_all(data$`Descricao Compra`[i], "[0-9]+")[[1]])
}
str(dat)
str(data)
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
write.csv(mtcars, 'mtcars.csv')
getwd()
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
require(DT)
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp()
runApp('GitHub Projects/Shiny/DataCleaning')
shiny::runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/Data Cleaning/test')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='josephds',
token='D24613E53D837DF3AD41320784900D68',
secret='jgGJA2Za2mB2mtaGKZZkvTu6sFhboOQfvvHgZtdj')
shiny::runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
install.packages('shiny.semantic')
require(shiny.semantic)
install.packages('semanti.dashboard')
devtools::install_github('Appsilon/semantic.dashboard')
require(semantic.dashboard)
shiny::runApp('GitHub Projects/Shiny/DataCleaning')
devtools::install_github("Appsilon/shiny.semantic")
devtools::install_github("Appsilon/semantic.dashboard")
devtools::install_github("Appsilon/semantic.dashboard", force = T)
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
shiny.semantic::installspec(user = FALSE)
runApp('GitHub Projects/Shiny/DataCleaning')
install.packages('shiny.semantic')
install.packages("shiny.semantic")
install.packages('semantic.dashboard')
shiny::runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/Data Cleaning/teste')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
install.packages('installr')
rm(list = ls())
runApp('GitHub Projects/Shiny/DataCleaning')
require(installr)
uninstall.packages(semantic.dashboard)
uninstall.packages('semantic.dashboard')
require(semantic.dashboard)
uninstall.packages('semantic.shny')
uninstall.packages('semantic.shiny')
uninstall.packages('shiny.semantic')
install.packages('ShinyBS')
install.packages('shinyBS')
install.packages('shinyjqui')
install.packages('rintrojs')
install.packages('shinycssloaders')
install.packages('shinyWidgets')
install.packages('shinyTree')
install.packages('shinyFiles')
install.packages('ShinySky')
install.packages('shinySky')
install.packages('rekun')
install.packages('Formattable')
install.packages('formattable')
install.packages('Rhandsontable')
install.packages('rhandsontable')
install.packages('Sparkline')
install.packages('sparkline')
install.packages('shinyace')
install.packages('shinyAce')
install.packages('shinyJs')
install.packages('shinyjs')
install.packages('d3r')
install.packages('shinyTest')
install.packages('shinytest')
install.packages('shinyloadtest')
runApp('GitHub Projects/Shiny/DataCleaning')
runApp('GitHub Projects/Shiny/DataCleaning')
require(stringr)
require(graphics)
require(ggvis)
install.packages('ggvis')
require(htmlwidgets)
require(googleVis)
install.packages('googleVis')
require(data.table)
install.packages('parallel')
require(parallel)
install.packaes('car')
install.packages('car')
install.packages('pool')
runApp('GitHub Projects/FlexPag/Predict-Model')
runApp('GitHub Projects/FlexPag/Predict-Model')
runApp('GitHub Projects/FlexPag/Predict-Model')
runApp('GitHub Projects/FlexPag/Predict-Model')
runApp('GitHub Projects/FlexPag/Predict-Model')
runApp('GitHub Projects/FlexPag/Predict-Model')
runApp('GitHub Projects/FlexPag/Predict-Model')
runApp('GitHub Projects/FlexPag/Predict-Model')
runApp('GitHub Projects/FlexPag/Predict-Model')
runApp('GitHub Projects/FlexPag/Predict-Model')
tags$script()
require(shiny)
tags$script()
tags$script(HTML('type="text/javascript" src="//cdn.datacamp.com/dcl-react.js.gz"'))
runApp('GitHub Projects/DSGE')
install.packages('datacamp-light')
devtools::install_github('datacamp/datacamp-light')
runApp('GitHub Projects/DSGE')
tags$script(type="text/javascript", src="//cdn.datacamp.com/dcl-react.js.gz")
class(tags$script(type="text/javascript", src="//cdn.datacamp.com/dcl-react.js.gz"))
class(tags$script(type="text/javascript", src="//cdn.datacamp.com/dcl-react.js.gz"))
class(tags$script(HTML('type="text/javascript" src="//cdn.datacamp.com/dcl-react.js.gz"')))
class(HTML('oi'))
runApp('GitHub Projects/DSGE')
tags$script()
tags$script('oie')
tags$script(src = 'jose')
tags$script(src = '//cdn.datacamp.com/dcl-react.js.gz')
tags$script(src = '//cdn.datacamp.com/dcl-react.js.gz', type = 'text/javascript')
runApp('GitHub Projects/DSGE')
runApp('GitHub Projects/DSGE')
runApp('GitHub Projects/FlexPag/App')
runApp('GitHub Projects/DSGE')
tags$iframe()
runApp('GitHub Projects/DSGE')
runApp('GitHub Projects/DSGE')
devtools::install_github('datacamp/tutorial')
tutorial::go_interactive()
go_interactive()
require(tutorial)
go_interactive()
runApp('GitHub Projects/DSGE')
install.packages('testwhat')
devtools::install_github('datacamp/testwhat')
require(testthat)
require(testwhat)
runApp('GitHub Projects/DSGE')
runApp('GitHub Projects/DSGE')
runApp('GitHub Projects/DSGE')
runApp('GitHub Projects/DSGE')
source(file.path('ui','table-1.R'), local = T)$value
getwd()
setwd("~/GitHub Projects/DSGE")
source(file.path('ui','table-1.R'), local = T)$value
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('app.R')
runApp()
<script type="text/javascript" src="//cdn.datacamp.com/dcl-react.js.gz"></script>
tags$script()
tags$script(scr = '//cdn.datacamp.com/dcl-react.js.gz')
tags$script(scr = '//cdn.datacamp.com/dcl-react.js.gz', type = 'text/javascript')
modelo <- tabItem(tabName = 'model',
fluidRow(
box(status = 'primary',
width = 12,
title = 'Script',
solidHeader = T,
collapsible = T,
h1('Desenvolva por si mesmo', color = 'red'),
p('Utilize-se de suas habilidades de Programação e refaça este modelo através do
software de programação estatística conhecido como R.'),
htmlOutput('frame'),
tags$script(scr = '//cdn.datacamp.com/dcl-react.js.gz', type = 'text/javascript'))
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('httpuv')
install.packages("httpuv")
install.packages('Rcpp')
shiny::runApp()
runApp()
require(shinydashboard)
runApp()
runApp()
runApp()
runApp()
tags$head(HTML("<script src= 'https://cdn.datacamp.com/datacamp-light-latest.min.js'></script>"))
A <-       tags$head(HTML("<script src= 'https://cdn.datacamp.com/datacamp-light-latest.min.js'></script>"))
A
str(A)
runApp()
